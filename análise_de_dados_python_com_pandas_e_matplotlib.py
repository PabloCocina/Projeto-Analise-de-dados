# -*- coding: utf-8 -*-
"""Análise de Dados - Python com Pandas e Matplotlib

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HzR0mOe_z1X2d0cLp2hg2GoUar44Syh5
"""

# Importando a biblioteca Pandas, maiores detalhes no site https://pandas.pydata.org/docs/index.html
import pandas as pd

# Criando dataframes e lendo os arquivos em excel

df1 = pd.read_excel('Aracaju.xlsx')
df2 = pd.read_excel('Fortaleza.xlsx')
df3 = pd.read_excel('Natal.xlsx')
df4 = pd.read_excel('Recife.xlsx')
df5 = pd.read_excel('Salvador.xlsx')

# Imprimindo cabeçalhado de um dataframe
df5.head()

# Concatenando os dataframes e imprimindo cabeçalho
df = pd.concat([df1,df2,df3,df4,df5])
df.head()

df.tail()

# Visualizando quantidade de linhas e colunas do dataframe
df.shape

# Retirando uma amostra de linhas do dataframe
df.sample(10)

# Tipo das dados
df.dtypes

# Alterando o tipo da coluna 'LojaID' para object.
df['LojaID'] = df['LojaID'].astype('object')

df.dtypes

"""# Tratando valores faltantes"""

df.isnull().sum()

"""Substituindo valores nulos"""

# Substituindo valores nulos pela média
df['Vendas'].fillna(df['Vendas'].mean(), inplace=True)

df.isnull().sum()

df.sample(15)

# Substituindo valores nulos por zero
df['Vendas'].fillna(0, inplace = True)

# Apagando linhas com valores nulos
df.dropna(inplace=True)

# Apagando linhas com valores nulos com base em apenas uma coluna
df.dropna(subset = ['Vendas'], inplace=True)

# Apagando linhas com valores faltantes
df.dropna(how='all', inplace=True)

df.sample(4)

"""# Criando novas colunas"""

# Criando a coluna 'Receitas' = 'Vendas' * 'Qtde'
df['Receitas'] = df['Vendas'].mul(df['Qtde'])

df.head()

"""# Trabalhando com datas"""

# Transformando a coluna de data em tipo inteiro
df['Data'] = df['Data'].astype('int64')

# Verificando o tipo de dado de cada coluna
df.dtypes

# Transformando a coluna de data em data
df['Data'] = pd.to_datetime(df['Data'])

df.dtypes

# Agrupamento por ano 
df.groupby(df['Data'].dt.year)['Receitas'].sum()

# Criando uma nova coluna com o ano
df['Ano_venda'] = df['Data'].dt.year

df.sample(10)

# Extraindo o mês e o dia
df['mes_venda'], df['dia_venda'] = (df['Data'].dt.month, df['Data'].dt.day)

df.sample(5)

# Retornando a data mais antiga
df['Ano_venda'].min()

# Calculando a diferença de dias
df['diferenca_dias'] = df['Data'] - df['Data'].min()

df.sample(10)

# Criando a coluna de trimestre
df['trimestre_venda'] = df['Data'].dt.quarter

df.sample(10)

# Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df['Data'].dt.year == 2019) & (df['Data'].dt.month == 3)]

vendas_marco_19.sample(10)

"""# Visualização de dados"""

df['LojaID'].value_counts(ascending=False)

# Gráfico de barras
df['LojaID'].value_counts(ascending=False).plot.bar();

# Gráfico de barras horizontal
df['LojaID'].value_counts(ascending=True).plot.barh(title = 'Vendas por loja');

# Gráfico de pizza usando o groupby
df.groupby(df['Data'].dt.year)['Receitas'].sum().plot.pie(title='Total Receita por Ano');

# Total de vendas por cidade
df['Cidade'].value_counts()

df['Cidade'].value_counts()

# Adicionando um título e alterando o nome dos eixos
import matplotlib.pyplot as plt
df['Cidade'].value_counts().plot.bar(title = 'Total de vendas por cidade')
plt.xlabel('Cidade')
plt.ylabel('Total Vendas');

# Alterando a cor
df['Cidade'].value_counts().plot.bar(title='Total de vendas por cidade', color = 'red')
plt.xlabel('Cidade')
plt.ylabel('Total de Vendas');

# Alterando o estilo, ver os diversos estilos em https://matplotlib.org/stable/gallery/index.html#style-sheets
plt.style.use('grayscale')

df.groupby(df['mes_venda'])['Qtde'].sum().plot(title='Produtos X Mês')
plt.xlabel('Mês')
plt.ylabel('Total Produtos vendidos')
plt.legend();

